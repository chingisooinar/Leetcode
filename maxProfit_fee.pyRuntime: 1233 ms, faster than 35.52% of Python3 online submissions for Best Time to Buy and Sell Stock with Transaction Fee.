class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        n = len(prices)
        '''
        @lru_cache(None)
        def dp(i, holding):
            if i == n:
                return 0
            if holding:
                return max(prices[i]  - fee + dp(i + 1, 0), dp(i + 1, holding))
            else:
                return max(-prices[i] + dp(i+1, 1), dp(i+1, 0))
        return dp(0, 0)
        '''
        dp = [[0, 0] for _ in range(n+1)]
        for i in range(n - 1, -1, -1):
            for holding in range(2):
                if holding:
                    res = max(prices[i] - fee + dp[i+1][0], dp[i+1][holding])
                else:
                    res = max(-prices[i] + dp[i+1][1], dp[i+1][0])
                dp[i][holding] = res
        return dp[0][0]
                    
